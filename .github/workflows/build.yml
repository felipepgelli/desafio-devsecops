name: Build Quarkus (Self-Hosted)

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

permissions:
  contents: read
  security-events: write   # necessário para enviar SARIF ao Code Scanning

jobs:
  build:
    runs-on: self-hosted   # runner Windows na sua máquina

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar JDK 17 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

        # --- Build do módulo getting-started (gera fast-jar) ---
      - name: Build com Maven (sem testes)
        shell: cmd
        working-directory: app/quarkus-quickstarts/getting-started
        run: .\mvnw.cmd -B -DskipTests -D"quarkus.package.type=fast-jar" clean package

       # ---- SonarQube (Maven) -----------------------------------------------------
      - name: "SonarQube: análise com Maven"
        shell: cmd
        working-directory: app/quarkus-quickstarts/getting-started
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN:    ${{ secrets.SONAR_TOKEN }}
        run: >
          .\mvnw.cmd -B verify sonar:sonar
          -Dsonar.host.url=%SONAR_HOST_URL%
          -Dsonar.token=%SONAR_TOKEN%
          -DskipTests
          -Dsonar.qualitygate.wait=false
          -Dsonar.projectKey=quarkus-service

          - name: Debug target
            shell: cmd
            working-directory: app/quarkus-quickstarts/getting-started
            run: dir target\quarkus-app
        # --- Docker Build (Temurin 17) ---
      - name: Build da imagem Docker (Temurin 17)
        shell: cmd
        working-directory: app/quarkus-quickstarts/getting-started
        run: |
          set IMAGE=getting-started:${{ github.sha }}
          docker build --no-cache -f src/main/docker/Dockerfile.jvm -t %IMAGE% .

      # Debug: garantir que a imagem existe localmente
      - name: Verificar imagem local
        shell: cmd
        run: |
          set IMAGE=getting-started:${{ github.sha }}
          echo Verificando %%IMAGE%%
          docker images
          docker image inspect %IMAGE% >nul 2>&1 || (echo ERRO: imagem %IMAGE% nao encontrada & exit /b 1)

      # Exportar a imagem para tar (robusto para o Trivy)
      - name: Exportar imagem para tar
        shell: cmd
        run: |
          set IMAGE=getting-started:${{ github.sha }}
          docker save %IMAGE% -o image.tar
          dir image.tar




        
      # ---- Instalar Trivy no Windows (curl + Expand-Archive) ---------------------
      - name: "Instalar Trivy (Windows)"
        shell: cmd
        run: |
          set TRIVY_VERSION=0.56.2
          curl -L -o trivy.zip https://github.com/aquasecurity/trivy/releases/download/v%TRIVY_VERSION%/trivy_%TRIVY_VERSION%_Windows-64bit.zip
          powershell -Command "Expand-Archive -Path trivy.zip -DestinationPath trivy -Force"
          echo %CD%\trivy>> %GITHUB_PATH%
          trivy -v

         # --- Trivy Image (usar a mesma tag) ---
      - name: "Trivy Image (gate: CRITICAL)"
        shell: cmd
        run: |
              trivy image --scanners vuln,secret,misconfig ^
                --severity CRITICAL ^
                --exit-code 1 ^
                --format sarif -o trivy-image.sarif ^
                --input image.tar


# ---- Trivy (filesystem) - gate temporário: CRITICAL -------------------
      - name: "Trivy Filesystem (gate: CRITICAL)"
        shell: cmd
        working-directory: app/quarkus-quickstarts/getting-started
        run: |
          trivy fs --scanners vuln,secret,config ^
            --severity CRITICAL ^
            --exit-code 1 ^
            --format sarif -o trivy-fs.sarif .



      # ---- Upload SARIF (categorias únicas) --------------------------------
      - name: Upload SARIF (image)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif
          category: trivy-image

      - name: Upload SARIF (fs)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif
          category: trivy-fs

      # ---- Guardar relatórios como artifacts -------------------------------
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: |
            trivy-image.sarif
            trivy-fs.sarif
