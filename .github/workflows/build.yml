name: Build Quarkus (Self-Hosted) + Trivy + Deploy K8s

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  build:
    name: build
    runs-on: self-hosted   # Windows na sua máquina
    env:
      WORKDIR: quarkus-service/app/quarkus-quickstarts/getting-started
      IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/quarkus-getting-started
      IMAGE_TAG_DES: des
      SARIF_IMAGE: trivy-image.sarif
      SARIF_FS: trivy-fs.sarif
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar JDK 17 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      # Build do módulo (gera fast-jar; sem testes p/ acelerar nesse workflow)
      - name: Build com Maven (sem testes)
        shell: cmd
        working-directory: ${{ env.WORKDIR }}
        run: .\mvnw.cmd -B -DskipTests -D"quarkus.package.type=fast-jar" clean package

      # Build da imagem Docker (Dockerfile.jvm com Eclipse Temurin 17)
      - name: Build da imagem Docker (Temurin 17)
        shell: pwsh
        working-directory: ${{ env.WORKDIR }}
        run: |
          docker build -f src/main/docker/Dockerfile.jvm -t $env:IMAGE_NAME:$env:IMAGE_TAG_DES .

      # (opcional) verificar imagem local
      - name: Verificar imagem local
        shell: pwsh
        run: docker images $env:IMAGE_NAME --format "{{.Repository}}:{{.Tag}} -> {{.ID}}"

      # Instalar Trivy no Windows
      - name: Instalar Trivy (Windows)
        shell: pwsh
        run: |
          choco install -y trivy
          trivy --version

      # Trivy Image (gate: CRITICAL apenas como evidência; ajuste severidade se quiser)
      - name: "Trivy Image (gate: CRITICAL)"
        shell: pwsh
        run: |
          trivy image --security-checks vuln \
            --severity HIGH,CRITICAL --ignore-unfixed `
            --format table --output trivy-image.txt `
            $env:IMAGE_NAME:$env:IMAGE_TAG_DES
          trivy image --security-checks vuln `
            --severity HIGH,CRITICAL --ignore-unfixed `
            --format sarif --output $env:SARIF_IMAGE `
            $env:IMAGE_NAME:$env:IMAGE_TAG_DES

      # Trivy Filesystem (no código-fonte do módulo)
      - name: "Trivy Filesystem (gate: CRITICAL)"
        shell: pwsh
        run: |
          trivy fs --security-checks vuln,secret `
            --severity HIGH,CRITICAL --ignore-unfixed `
            --format table --output trivy-fs.txt `
            $env:WORKDIR
          trivy fs --security-checks vuln,secret `
            --severity HIGH,CRITICAL --ignore-unfixed `
            --format sarif --output $env:SARIF_FS `
            $env:WORKDIR

      # Upload SARIF (Code Scanning) - opcional
      - name: Upload SARIF (image)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.SARIF_IMAGE }}
      - name: Upload SARIF (fs)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.SARIF_FS }}

      # Artefatos de evidência
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: |
            trivy-image.txt
            trivy-fs.txt

  deploy_k8s:
    name: Deploy to Kubernetes (DES + PRD) - Local (Minikube)
    runs-on: self-hosted
    needs: build
    env:
      WORKDIR: quarkus-service/app/quarkus-quickstarts/getting-started
      IMAGE_NAME: quarkus-getting-started
      TAG_DES: des
      CONTAINER: app
      NS_DES: des
      DEPLOY_DES: quarkus-des
      NS_PRD: prd
      DEPLOY_PRD: quarkus-prd
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # kubectl + minikube no runner Windows
      - name: Ensure kubectl (Windows)
        shell: pwsh
        run: |
          choco install -y kubernetes-cli
          kubectl version --client

      - name: Ensure Minikube (Windows)
        shell: pwsh
        run: |
          choco install -y minikube
          minikube status || minikube start

      # Build da imagem local (sem registry remoto)
      - name: Build local image (Dockerfile.jvm)
        shell: pwsh
        working-directory: ${{ env.WORKDIR }}
        run: |
          docker build -f src/main/docker/Dockerfile.jvm -t $env:IMAGE_NAME:$env:TAG_DES .

      # Carregar as imagens no Minikube (DES = 'des'; PRD = SHA imutável)
      - name: Load images into Minikube
        shell: pwsh
        run: |
          # DES
          minikube image load $env:IMAGE_NAME:$env:TAG_DES
          # PRD
          $TAG_PRD = "${{ github.sha }}"
          docker tag  $env:IMAGE_NAME:$env:TAG_DES $env:IMAGE_NAME:$TAG_PRD
          minikube image load $env:IMAGE_NAME:$TAG_PRD
          echo "TAG_PRD=$TAG_PRD" | Out-File -FilePath $env:GITHUB_ENV -Append

      # kubeconfig (se necessário) — pule se seu runner já usa o contexto minikube
      - name: Use minikube context
        shell: pwsh
        run: |
          kubectl config use-context minikube
          kubectl cluster-info

      # ----- DES -----
      - name: Ensure namespace DES
        shell: pwsh
        run: kubectl get ns $env:NS_DES 2>$null || kubectl create ns $env:NS_DES

      - name: Apply manifests DES + set image
        shell: pwsh
        run: |
          kubectl apply -n $env:NS_DES -f k8s/des/
          kubectl -n $env:NS_DES set image deployment/$env:DEPLOY_DES $env:CONTAINER=$env:IMAGE_NAME:$env:TAG_DES --record=true
          kubectl -n $env:NS_DES rollout status deployment/$env:DEPLOY_DES --timeout=180s

      # ----- PRD -----
      - name: Ensure namespace PRD
        shell: pwsh
        run: kubectl get ns $env:NS_PRD 2>$null || kubectl create ns $env:NS_PRD

      - name: Apply manifests PRD + set image (commit SHA)
        shell: pwsh
        run: |
          kubectl apply -n $env:NS_PRD -f k8s/prd/
          kubectl -n $env:NS_PRD set image deployment/$env:DEPLOY_PRD $env:CONTAINER=$env:IMAGE_NAME:$env:TAG_PRD --record=true
          kubectl -n $env:NS_PRD rollout status deployment/$env:DEPLOY_PRD --timeout=180s
