name: CI/CD Local - Build + Trivy + Deploy (DES/PRD)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  ci_cd:
    runs-on: self-hosted
    env:
      # ajuste se seu módulo estiver em outro lugar
      WORKDIR: quarkus-service/app/quarkus-quickstarts/getting-started

      # imagem local (sem Docker Hub)
      IMAGE_NAME: quarkus-getting-started
      TAG_DES: des

      # K8s: nomes alinhados aos seus manifests
      NS_DES: des
      NS_PRD: prd
      DEPLOY_DES: getting-started
      DEPLOY_PRD: getting-started
      CONTAINER: app

      # arquivos de evidência
      SARIF_IMAGE: trivy-image.sarif
      SARIF_FS: trivy-fs.sarif

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      # ---------- Build do app (gera fast-jar) ----------
      - name: Maven build (sem testes)
        shell: cmd
        working-directory: ${{ env.WORKDIR }}
        run: .\mvnw.cmd -B -DskipTests -D"quarkus.package.type=fast-jar" clean package

      # ---------- Build da imagem Docker local ----------
      - name: Docker build (Dockerfile.jvm)
        shell: pwsh
        working-directory: ${{ env.WORKDIR }}
        run: |
          docker build -f src/main/docker/Dockerfile.jvm -t $env:IMAGE_NAME:$env:TAG_DES .

      # ---------- Instalar Trivy ----------
      - name: Instalar Trivy (Windows)
        shell: pwsh
        run: |
          choco install -y trivy
          trivy --version

      # ---------- Trivy FS (código-fonte) ----------
      - name: Trivy FS (vuln + secret)
        shell: pwsh
        run: |
          trivy fs --security-checks vuln,secret `
            --severity HIGH,CRITICAL --ignore-unfixed `
            --format table --output trivy-fs.txt `
            $env:WORKDIR
          trivy fs --security-checks vuln,secret `
            --severity HIGH,CRITICAL --ignore-unfixed `
            --format sarif --output $env:SARIF_FS `
            $env:WORKDIR

      # ---------- Trivy Image ----------
      - name: Trivy Image (vuln)
        shell: pwsh
        run: |
          trivy image --security-checks vuln `
            --severity HIGH,CRITICAL --ignore-unfixed `
            --format table --output trivy-image.txt `
            $env:IMAGE_NAME:$env:TAG_DES
          trivy image --security-checks vuln `
            --severity HIGH,CRITICAL --ignore-unfixed `
            --format sarif --output $env:SARIF_IMAGE `
            $env:IMAGE_NAME:$env:TAG_DES

      - name: Upload artifacts (Trivy)
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: |
            trivy-fs.txt
            trivy-image.txt
            ${{ env.SARIF_FS }}
            ${{ env.SARIF_IMAGE }}

      # ---------- kubectl + minikube ----------
      - name: Ensure kubectl + minikube
        shell: pwsh
        run: |
          choco install -y kubernetes-cli
          choco install -y minikube
          minikube status || minikube start
          kubectl config use-context minikube
          kubectl cluster-info

      # ---------- Carregar imagens no Minikube (DES e PRD-SHA) ----------
      - name: Load images into Minikube (DES + PRD)
        shell: pwsh
        run: |
          # DES
          minikube image load $env:IMAGE_NAME:$env:TAG_DES
          # PRD (tag imutável: SHA do commit)
          $TAG_PRD = "${{ github.sha }}"
          docker tag  $env:IMAGE_NAME:$env:TAG_DES $env:IMAGE_NAME:$TAG_PRD
          minikube image load $env:IMAGE_NAME:$TAG_PRD
          echo "TAG_PRD=$TAG_PRD" | Out-File -FilePath $env:GITHUB_ENV -Append

      # ---------- Deploy DES ----------
      - name: Ensure namespace DES
        shell: pwsh
        run: kubectl get ns $env:NS_DES 2>$null || kubectl create ns $env:NS_DES

      - name: Apply manifests DES + set image
        shell: pwsh
        run: |
          kubectl apply -n $env:NS_DES -f k8s/des/
          kubectl -n $env:NS_DES set image deployment/$env:DEPLOY_DES $env:CONTAINER=$env:IMAGE_NAME:$env:TAG_DES --record=true
          kubectl -n $env:NS_DES rollout status deployment/$env:DEPLOY_DES --timeout=180s

      # ---------- Deploy PRD ----------
      - name: Ensure namespace PRD
        shell: pwsh
        run: kubectl get ns $env:NS_PRD 2>$null || kubectl create ns $env:NS_PRD

      - name: Apply manifests PRD + set image (SHA)
        shell: pwsh
        run: |
          kubectl apply -n $env:NS_PRD -f k8s/prd/
          kubectl -n $env:NS_PRD set image deployment/$env:DEPLOY_PRD $env:CONTAINER=$env:IMAGE_NAME:$env:TAG_PRD --record=true
          kubectl -n $env:NS_PRD rollout status deployment/$env:DEPLOY_PRD --timeout=180s